{"version":3,"file":"random.module.js","sources":["../src/rng.ts","../src/generators/function.ts","../src/rng-factory.ts","../src/distributions/uniform.ts","../src/validation.ts","../src/distributions/uniform-int.ts","../src/distributions/uniform-boolean.ts","../src/distributions/normal.ts","../src/distributions/log-normal.ts","../src/distributions/bernoulli.ts","../src/distributions/binomial.ts","../src/distributions/geometric.ts","../src/distributions/poisson.ts","../src/distributions/exponential.ts","../src/distributions/irwin-hall.ts","../src/distributions/bates.ts","../src/distributions/pareto.ts","../src/generators/math-random.ts","../src/random.ts"],"sourcesContent":["export type SeedFn = () => number\nexport type SeedType = number | string | SeedFn | RNG\n\nexport default abstract class RNG {\n  abstract get name(): string\n\n  abstract next(): number\n\n  abstract seed(_seed?: SeedType, _opts?: Record<string, unknown>): void\n\n  abstract clone(_seed?: SeedType, _opts?: Record<string, unknown>): RNG\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _seed(seed: number, _opts?: Record<string, unknown>) {\n    // TODO: add entropy and stuff\n\n    if (seed === (seed || 0)) {\n      return seed\n    } else {\n      const strSeed = '' + seed\n      let s = 0\n\n      for (let k = 0; k < strSeed.length; ++k) {\n        s ^= strSeed.charCodeAt(k) | 0\n      }\n\n      return s\n    }\n  }\n}\n","import RNG, { SeedFn } from '../rng'\n\nexport default class RNGFunction extends RNG {\n  _rng: SeedFn\n\n  constructor(thunk: SeedFn, opts?: Record<string, unknown>) {\n    super()\n\n    this.seed(thunk, opts)\n  }\n\n  get name() {\n    return 'function'\n  }\n\n  next() {\n    return this._rng()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(thunk: SeedFn, _opts?: Record<string, unknown>) {\n    this._rng = thunk\n  }\n\n  clone(_: undefined, opts: Record<string, unknown>) {\n    return new RNGFunction(this._rng, opts)\n  }\n}\n","import seedrandom from 'seedrandom'\n\nimport RNG from './rng'\nimport RNGFunction from './generators/function'\n\n/**\n * Construct an RNG with variable inputs. Used in calls to Random constructor\n * @param {...*} args - Distribution-specific arguments\n * @return RNG\n *\n * @example\n * new Random(RNGFactory(...args))\n */\nexport default <T extends any[]>(...args: T) => {\n  const [arg0 = 'default'] = args\n\n  switch (typeof arg0) {\n    case 'object':\n      if (arg0 instanceof RNG) {\n        return arg0\n      }\n      break\n\n    case 'function':\n      return new RNGFunction(arg0)\n\n    case 'number':\n    case 'string':\n    default:\n      return new RNGFunction(seedrandom(...args))\n  }\n\n  throw new Error(`invalid RNG \"${arg0}\"`)\n}\n","import { Random } from '../random'\n\nexport default (random: Random, min = 0, max = 1) => {\n  return () => {\n    return random.next() * (max - min) + min\n  }\n}\n","export function numberValidator(num: number) {\n  return new NumberValidator(num)\n}\n\nexport class NumberValidator {\n  private n: number\n  constructor(num: number) {\n    this.n = num\n  }\n\n  public isInt = (): this => {\n    if (Number.isInteger(this.n)) {\n      return this\n    }\n    throw new Error(`Expected number to be an integer, got ${this.n}`)\n  }\n\n  public isPositive = (): this => {\n    if (this.n > 0) {\n      return this\n    }\n    throw new Error(`Expected number to be positive, got ${this.n}`)\n  }\n\n  public lessThan = (v: number): this => {\n    if (this.n < v) {\n      return this\n    }\n    throw new Error(`Expected number to be less than ${v}, got ${this.n}`)\n  }\n\n  public greaterThanOrEqual = (v: number): this => {\n    if (this.n >= v) {\n      return this\n    }\n    throw new Error(\n      `Expected number to be greater than or equal to ${v}, got ${this.n}`\n    )\n  }\n\n  public greaterThan = (v: number): this => {\n    if (this.n > v) {\n      return this\n    }\n    throw new Error(`Expected number to be greater than ${v}, got ${this.n}`)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, min = 0, max = 1) => {\n  if (max === undefined) {\n    max = min === undefined ? 1 : min\n    min = 0\n  }\n\n  numberValidator(min).isInt()\n  numberValidator(max).isInt()\n\n  return () => {\n    return Math.floor(random.next() * (max - min + 1) + min)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random) => {\n  return () => {\n    return random.next() >= 0.5\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  return () => {\n    let x: number, y: number, r: number\n\n    do {\n      x = random.next() * 2 - 1\n      y = random.next() * 2 - 1\n      r = x * x + y * y\n    } while (!r || r > 1)\n\n    return mu + sigma * y * Math.sqrt((-2 * Math.log(r)) / r)\n  }\n}\n","import { Random } from '../random'\n\nexport default (random: Random, mu = 0, sigma = 1) => {\n  const normal = random.normal(mu, sigma)\n  return () => {\n    return Math.exp(normal())\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    return Math.floor(random.next() + p)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1, p = 0.5) => {\n  numberValidator(n).isInt().isPositive()\n  numberValidator(p).greaterThanOrEqual(0).lessThan(1)\n\n  return () => {\n    let i = 0\n    let x = 0\n\n    while (i++ < n) {\n      if (random.next() < p) {\n        x++\n      }\n    }\n    return x\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, p = 0.5) => {\n  numberValidator(p).greaterThan(0).lessThan(1)\n  const invLogP = 1.0 / Math.log(1.0 - p)\n\n  return () => {\n    return Math.floor(1 + Math.log(random.next()) * invLogP)\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nconst logFactorialTable = [\n  0.0, 0.0, 0.69314718055994529, 1.791759469228055, 3.1780538303479458,\n  4.7874917427820458, 6.5792512120101012, 8.5251613610654147,\n  10.604602902745251, 12.801827480081469\n]\n\nconst logFactorial = (k: number) => {\n  return logFactorialTable[k]\n}\n\nconst logSqrt2PI = 0.91893853320467267\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  if (lambda < 10) {\n    // inversion method\n    const expMean = Math.exp(-lambda)\n\n    return () => {\n      let p = expMean\n      let x = 0\n      let u = random.next()\n\n      while (u > p) {\n        u = u - p\n        p = (lambda * p) / ++x\n      }\n\n      return x\n    }\n  } else {\n    // generative method\n    const smu = Math.sqrt(lambda)\n    const b = 0.931 + 2.53 * smu\n    const a = -0.059 + 0.02483 * b\n    const invAlpha = 1.1239 + 1.1328 / (b - 3.4)\n    const vR = 0.9277 - 3.6224 / (b - 2)\n\n    return () => {\n      while (true) {\n        let u\n        let v = random.next()\n\n        if (v <= 0.86 * vR) {\n          u = v / vR - 0.43\n          return Math.floor(\n            ((2 * a) / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445\n          )\n        }\n\n        if (v >= vR) {\n          u = random.next() - 0.5\n        } else {\n          u = v / vR - 0.93\n          u = (u < 0 ? -0.5 : 0.5) - u\n          v = random.next() * vR\n        }\n\n        const us = 0.5 - Math.abs(u)\n        if (us < 0.013 && v > us) {\n          continue\n        }\n\n        const k = Math.floor(((2 * a) / us + b) * u + lambda + 0.445)\n        v = (v * invAlpha) / (a / (us * us) + b)\n\n        if (k >= 10) {\n          const t =\n            (k + 0.5) * Math.log(lambda / k) -\n            lambda -\n            logSqrt2PI +\n            k -\n            (1 / 12.0 - (1 / 360.0 - 1 / (1260.0 * k * k)) / (k * k)) / k\n\n          if (Math.log(v * smu) <= t) {\n            return k\n          }\n        } else if (k >= 0) {\n          const f = logFactorial(k) ?? 0\n\n          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {\n            return k\n          }\n        }\n      }\n    }\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, lambda = 1) => {\n  numberValidator(lambda).isPositive()\n\n  return () => {\n    return -Math.log(1 - random.next()) / lambda\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().greaterThanOrEqual(0)\n\n  return () => {\n    let sum = 0\n    for (let i = 0; i < n; ++i) {\n      sum += random.next()\n    }\n\n    return sum\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, n = 1) => {\n  numberValidator(n).isInt().isPositive()\n  const irwinHall = random.irwinHall(n)\n\n  return () => {\n    return irwinHall() / n\n  }\n}\n","import { Random } from '../random'\nimport { numberValidator } from '../validation'\n\nexport default (random: Random, alpha = 1) => {\n  numberValidator(alpha).greaterThanOrEqual(0)\n  const invAlpha = 1.0 / alpha\n\n  return () => {\n    return 1.0 / Math.pow(1.0 - random.next(), invAlpha)\n  }\n}\n","import RNG from '../rng'\n\nexport default class RNGMathRandom extends RNG {\n  get name() {\n    return 'default'\n  }\n\n  next() {\n    return Math.random()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  seed(_seed: unknown, _opts: Record<string, unknown>) {\n    // intentionally empty\n  }\n\n  clone() {\n    return new RNGMathRandom()\n  }\n}\n","import RNG from './rng'\nimport RNGFactory from './rng-factory'\n\nimport uniform from './distributions/uniform'\nimport uniformInt from './distributions/uniform-int'\nimport uniformBoolean from './distributions/uniform-boolean'\nimport normal from './distributions/normal'\nimport logNormal from './distributions/log-normal'\nimport bernoulli from './distributions/bernoulli'\nimport binomial from './distributions/binomial'\nimport geometric from './distributions/geometric'\nimport poisson from './distributions/poisson'\nimport exponential from './distributions/exponential'\nimport irwinHall from './distributions/irwin-hall'\nimport bates from './distributions/bates'\nimport pareto from './distributions/pareto'\nimport RNGMathRandom from './generators/math-random'\n\n/**\n * Distribution function\n */\ninterface IDistFn<R> {\n  (random: Random, ...argv: any): R\n}\n\n/**\n * Distribution\n */\ninterface IDist<R> {\n  (): R\n}\n\n/**\n * Keyed cache entry\n */\ninterface ICacheEntry<T> {\n  key: string\n  distribution: () => T\n}\n\nexport { RNG, RNGFactory }\n\n/**\n * Seedable random number generator supporting many common distributions.\n *\n * Defaults to Math.random as its underlying pseudorandom number generator.\n *\n * @name Random\n * @class\n *\n * @param {RNG|function} [rng=Math.random] - Underlying pseudorandom number generator.\n */\nexport class Random {\n  protected _rng: RNG\n  protected _patch: typeof Math.random | undefined\n  protected _cache: {\n    [k: string]: ICacheEntry<any>\n  } = {}\n\n  constructor(rng?: RNG) {\n    if (rng && rng instanceof RNG) {\n      this.use(rng)\n    } else {\n      this.use(new RNGMathRandom())\n    }\n    this._cache = {}\n  }\n\n  /**\n   * @member {RNG} Underlying pseudo-random number generator\n   */\n  get rng() {\n    return this._rng\n  }\n\n  /**\n   * Creates a new `Random` instance, optionally specifying parameters to\n   * set a new seed.\n   *\n   * @see RNG.clone\n   *\n   * @param {string} [seed] - Optional seed for new RNG.\n   * @param {object} [opts] - Optional config for new RNG options.\n   * @return {Random}\n   */\n  clone<T>(...args: [T]): Random {\n    if (args.length) {\n      return new Random(RNGFactory(...args))\n    } else {\n      return new Random(this.rng.clone())\n    }\n  }\n\n  /**\n   * Sets the underlying pseudorandom number generator used via\n   * either an instance of `seedrandom`, a custom instance of RNG\n   * (for PRNG plugins), or a string specifying the PRNG to use\n   * along with an optional `seed` and `opts` to initialize the\n   * RNG.\n   *\n   * @example\n   * import random from 'random'\n   *\n   * random.use('example_seedrandom_string')\n   * // or\n   * random.use(seedrandom('kittens'))\n   * // or\n   * random.use(Math.random)\n   *\n   * @param {...*} args\n   */\n  use(...args: [RNG]) {\n    this._rng = RNGFactory(...args)\n  }\n\n  /**\n   * Patches `Math.random` with this Random instance's PRNG.\n   */\n  patch() {\n    if (this._patch) {\n      throw new Error('Math.random already patched')\n    }\n\n    this._patch = Math.random\n    Math.random = this.uniform()\n  }\n\n  /**\n   * Restores a previously patched `Math.random` to its original value.\n   */\n  unpatch() {\n    if (this._patch) {\n      Math.random = this._patch\n      delete this._patch\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform utility functions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Convenience wrapper around `this.rng.next()`\n   *\n   * Returns a floating point number in [0, 1).\n   *\n   * @return {number}\n   */\n  next = (): number => {\n    return this._rng.next()\n  }\n\n  /**\n   * Samples a uniform random floating point number, optionally specifying\n   * lower and upper bounds.\n   *\n   * Convence wrapper around `random.uniform()`\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {number}\n   */\n  float = (min?: number, max?: number): number => {\n    return this.uniform(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  int = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random integer, optionally specifying lower and upper\n   * bounds.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @alias `random.int`\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {number}\n   */\n  integer = (min?: number, max?: number) => {\n    return this.uniformInt(min, max)()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @alias `random.boolean`\n   *\n   * @return {boolean}\n   */\n  bool = () => {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Samples a uniform random boolean value.\n   *\n   * Convence wrapper around `random.uniformBoolean()`\n   *\n   * @return {boolean}\n   */\n  boolean = () => {\n    return this.uniformBoolean()()\n  }\n\n  /**\n   * Returns an item chosen uniformly at trandom from the given array.\n   *\n   * Convence wrapper around `random.uniformInt()`\n   *\n   * @param {Array<T>} [array] - Lower bound (integer, inclusive)\n   * @return {T | undefined}\n   */\n  choice<T>(array: Array<T>): T | undefined {\n    if (!Array.isArray(array)) {\n      throw new Error(\n        `Random.choice expected input to be an array, got ${typeof array}`\n      )\n    }\n\n    const length = array?.length\n\n    if (length > 0) {\n      const index = this.uniformInt(0, length - 1)()\n      return array[index]\n    } else {\n      return undefined\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  // Uniform distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n   *\n   * @param {number} [min=0] - Lower bound (float, inclusive)\n   * @param {number} [max=1] - Upper bound (float, exclusive)\n   * @return {function}\n   */\n  uniform = (min?: number, max?: number) => {\n    return this._memoize<number>('uniform', uniform, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n   *\n   * @param {number} [min=0] - Lower bound (integer, inclusive)\n   * @param {number} [max=1] - Upper bound (integer, inclusive)\n   * @return {function}\n   */\n  uniformInt = (min?: number, max?: number) => {\n    return this._memoize<number>('uniformInt', uniformInt, min, max)\n  }\n\n  /**\n   * Generates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\n   * with two possible outcomes, `true` or `false.\n   *\n   * This method is analogous to flipping a coin.\n   *\n   * @return {function}\n   */\n  uniformBoolean = () => {\n    return this._memoize<boolean>('uniformBoolean', uniformBoolean)\n  }\n\n  // --------------------------------------------------------------------------\n  // Normal distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean\n   * @param {number} [sigma=1] - Standard deviation\n   * @return {function}\n   */\n  normal = (mu?: number, sigma?: number) => {\n    return normal(this, mu, sigma)\n  }\n\n  /**\n   * Generates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n   *\n   * @param {number} [mu=0] - Mean of underlying normal distribution\n   * @param {number} [sigma=1] - Standard deviation of underlying normal distribution\n   * @return {function}\n   */\n  logNormal = (mu?: number, sigma?: number) => {\n    return logNormal(this, mu, sigma)\n  }\n\n  // --------------------------------------------------------------------------\n  // Bernoulli distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  bernoulli = (p?: number) => {\n    return bernoulli(this, p)\n  }\n\n  /**\n   * Generates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n   *\n   * @param {number} [n=1] - Number of trials.\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  binomial = (n?: number, p?: number) => {\n    return binomial(this, n, p)\n  }\n\n  /**\n   * Generates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n   *\n   * @param {number} [p=0.5] - Success probability of each trial.\n   * @return {function}\n   */\n  geometric = (p?: number) => {\n    return geometric(this, p)\n  }\n\n  // --------------------------------------------------------------------------\n  // Poisson distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n   *\n   * @param {number} [lambda=1] - Mean (lambda > 0)\n   * @return {function}\n   */\n  poisson = (lambda?: number) => {\n    return poisson(this, lambda)\n  }\n\n  /**\n   * Generates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n   *\n   * @param {number} [lambda=1] - Inverse mean (lambda > 0)\n   * @return {function}\n   */\n  exponential = (lambda?: number) => {\n    return exponential(this, lambda)\n  }\n\n  // --------------------------------------------------------------------------\n  // Misc distributions\n  // --------------------------------------------------------------------------\n\n  /**\n   * Generates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to sum (n >= 0)\n   * @return {function}\n   */\n  irwinHall = (n?: number) => {\n    return irwinHall(this, n)\n  }\n\n  /**\n   * Generates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n   *\n   * @param {number} [n=1] - Number of uniform samples to average (n >= 1)\n   * @return {function}\n   */\n  bates = (n?: number) => {\n    return bates(this, n)\n  }\n\n  /**\n   * Generates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n   *\n   * @param {number} [alpha=1] - Alpha\n   * @return {function}\n   */\n  pareto = (alpha?: number) => {\n    return pareto(this, alpha)\n  }\n\n  // --------------------------------------------------------------------------\n  // Internal\n  // --------------------------------------------------------------------------\n\n  /**\n   * Memoizes distributions to ensure they're only created when necessary.\n   *\n   * Returns a thunk which that returns independent, identically distributed\n   * samples from the specified distribution.\n   *\n   * @private\n   *\n   * @param {string} label - Name of distribution\n   * @param {function} getter - Function which generates a new distribution\n   * @param {...*} args - Distribution-specific arguments\n   *\n   * @return {function}\n   */\n  _memoize<T>(label: string, getter: IDistFn<any>, ...args: any[]): IDist<T> {\n    const key = `${args.join(';')}`\n    let value = this._cache[label]\n\n    if (value === undefined || value.key !== key) {\n      value = {\n        key,\n        distribution: getter(this, ...args)\n      }\n      this._cache[label] = value\n    }\n\n    return value.distribution\n  }\n}\n\n// defaults to Math.random as its RNG\nexport default new Random()\n"],"names":["RNG","_seed","seed","_opts","strSeed","s","k","length","charCodeAt","RNGFunction","thunk","opts","_rng","next","clone","_","args","arg0","seedrandom","Error","random","min","max","numberValidator","num","NumberValidator","n","isInt","Number","isInteger","isPositive","lessThan","v","greaterThanOrEqual","greaterThan","undefined","Math","floor","mu","sigma","x","y","r","sqrt","log","normal","exp","p","i","invLogP","logFactorialTable","logFactorial","logSqrt2PI","lambda","expMean","u","smu","b","a","invAlpha","vR","abs","us","t","f","sum","irwinHall","alpha","pow","RNGMathRandom","Random","rng","_patch","_cache","uniform","uniformInt","integer","bool","uniformBoolean","_memoize","logNormal","bernoulli","binomial","geometric","poisson","exponential","bates","pareto","use","RNGFactory","patch","unpatch","choice","array","Array","isArray","index","label","getter","key","join","value","distribution"],"mappings":"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"}